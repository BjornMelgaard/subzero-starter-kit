# This location is accessed by rabbit_auth_backend_http whenever someone is 
# trying to login and listen for events in the system
# we expect here that username is of the form user_10 and the password is a session cookie which is a jwt
# so we validate the jwt and check that the username is the same as the one in the jwt payload
# The user/password format is created/controlled in the openresty env in stomp.conf file

# RabbitMQ will make a succession of calls to this endpoint giving you the ability to decide if the action should be authorized
# Example of calls:


# POST /rabbitmq/auth/user
#     vhost = "/"
#     username = "user_1"
#     password = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIiA6ICJ3ZWJ1c2VyIiwgInVzZXJfaWQiIDogMSwgImV4cCIgOiAxNTE2MTgwMDE5fQ.uCZ1xJ_JQglJtt87sW-6PQVaPml15c3iWFjT2bCDeDY"

# POST /rabbitmq/auth/vhost
#     vhost = "/"
#     username = "user_1"
#     ip = "172.18.0.6"

# POST /rabbitmq/auth/resource
#     vhost = "/"
#     resource = "queue"
#     permission = "configure"
#     name = "stomp-subscription-Po5wAyCqq-ig3Flc5WW-6Q"
#     username = "user_1"

# POST /rabbitmq/auth/resource
#     vhost = "/"
#     resource = "queue"
#     permission = "read"
#     name = "stomp-subscription-Po5wAyCqq-ig3Flc5WW-6Q"
#     username = "user_1"

# POST /rabbitmq/auth/resource
#     vhost = "/"
#     resource = "queue"
#     permission = "write"
#     name = "stomp-subscription-Po5wAyCqq-ig3Flc5WW-6Q"
#     username = "user_1"

# POST /rabbitmq/auth/resource
#     vhost = "/"
#     resource = "exchange"
#     permission = "read"
#     name = "amq.topic"
#     username = "user_1"

# POST /rabbitmq/auth/topic
#     vhost = "/"
#     resource = "topic"
#     ["variable_map.vhost"] = "/"
#     permission = "read"
#     ["variable_map.username"] = "user_1"
#     name = "amq.topic"
#     username = "user_1"
#     routing_key = "#.table-todo.#"


location /rabbitmq/auth {

	content_by_lua_block {
		local allow = false
		ngx.req.read_body()

        local args, err = ngx.req.get_post_args()
        local path = ngx.var.uri:gsub('/rabbitmq/auth/', '')
        
        if path == 'user' then
        	local jwt = require 'resty.jwt'
        	local jwt_secret = os.getenv('JWT_SECRET')
        	local username = args.username
        	local password = args.password
        	local user_id = tonumber(username:gsub('user_',''),10)
        	local token = password
        	local jwt_obj = jwt:verify(jwt_secret, token)
        	if jwt_obj and jwt_obj.valid and user_id == jwt_obj.payload.user_id then
        		allow = true
        	end
        end

        if path == 'vhost' then
        	local vhost = args.vhost
        	if vhost == '/' then
        		allow = true
        	end
        end

        if path == 'resource' then
        	allow = true
        end

        if path == 'topic' then
        	allow = true
        end

        if allow then
			ngx.print('allow')
		else
			ngx.print('deny')
		end
	}
}